AWSTemplateFormatVersion: "2010-09-09"
Description: API for constructing Alexa access token based on Nightscout server URL.
Parameters:
    ApiName:
        Type: String
        Default: nightscout-url-token
    Stage:
        Type: String
        Default: prod
Resources:
    LambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: | #file ../nightscout-url-token/lambda_function.py
                    from __future__ import print_function

                    import base64
                    import json
                    import urllib2

                    TIMEOUT = 1


                    def validate_url(url):
                        request = urllib2.urlopen(url, timeout=TIMEOUT)
                        json_body = json.load(request)
                        last_datapoint = json_body['bgs'][0]['sgv']
                        return last_datapoint


                    def canonicalize_url(url):
                        if not url.startswith('http://') and not url.startswith('https://'):
                            url = 'http://' + url
                        if not url.endswith('/'):
                            url = url + '/'
                        url = url + 'pebble'
                        return url


                    def lambda_handler(event, context):
                        query = event['queryStringParameters']
                        url = query['url']
                        canonical_url = canonicalize_url(url)
                        last_datapoint = validate_url(canonical_url)
                        token = base64.urlsafe_b64encode(canonical_url)
                        return {
                            'statusCode': '200',
                            'body': json.dumps({
                                'canonical_url': canonical_url,
                                'last_datapoint': last_datapoint,
                                'token': token
                            }),
                            'headers': {
                                'Access-Control-Allow-Origin': '*',
                                'Content-Type': 'application/json',
                            },
                        }
            Description: Validate Nightscout URL and generate access token
            Handler: index.lambda_handler
            MemorySize: 128
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: python2.7
            Timeout: 3
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service: "lambda.amazonaws.com"
                    Action: "sts:AssumeRole" 
            Path: "/service-role/"
            Policies:
              - PolicyName: "logs"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                        Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
    RestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Description: API for constructing Alexa access token based on Nightscout server URL.
            Name: !Ref ApiName
    ApiResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt RestApi.RootResourceId
            PathPart: !Ref ApiName
            RestApiId: !Ref RestApi
    ApiMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: NONE
            HttpMethod: ANY
            Integration:
                IntegrationHttpMethod: POST
                IntegrationResponses:
                  - StatusCode: 200
                    SelectionPattern: .*
                Type: AWS_PROXY
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
            ResourceId: !Ref ApiResource
            RestApiId: !Ref RestApi
    ApiDeployment:
        Type: AWS::ApiGateway::Deployment
        Properties:
            RestApiId: !Ref RestApi
            StageName: !Ref Stage
        DependsOn: ApiMethod
Outputs:
    ApiUrl:
        Export:
            Name: nightscout-url-token:ApiUrl
        Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/${ApiName}"
